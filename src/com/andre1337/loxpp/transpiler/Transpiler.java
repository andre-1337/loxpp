package com.andre1337.loxpp.transpiler;

import com.andre1337.loxpp.ast.Expr;
import com.andre1337.loxpp.ast.Stmt;
import com.andre1337.loxpp.classes.LoxLazy;
import com.andre1337.loxpp.classes.RuntimeError;

import java.util.List;

public class Transpiler implements Stmt.Visitor<Void>, Expr.Visitor<Void> {
    public StringBuilder output;

    public Transpiler() {
        this.output = new StringBuilder("// THIS OUTPUT WAS GENERATED BY THE LOX++ TRANSPILER\n");
    }

    public void transpile(List<Stmt> statements) {
        try {
            for (Stmt statement : statements) {
                execute(statement);
            }
        } catch (RuntimeError ignored) {}
    }

    public String getOutput() {
        return output.toString();
    }

    private Object evaluate(Expr expr) {
        if (expr == null) return null;
        return getValue(expr.accept(this));
    }

    private void execute(Stmt stmt) {
        stmt.accept(this);
    }

    private Object getValue(Object obj) {
        if (obj instanceof LoxLazy lazy) {
            return lazy.get();
        }

        return obj;
    }

    @Override
    public Void visitBlockStmt(Stmt.Block stmt) {
        return null;
    }

    @Override
    public Void visitClassStmt(Stmt.Class stmt) {
        return null;
    }

    @Override
    public Void visitExpressionStmt(Stmt.Expression stmt) {
        return null;
    }

    @Override
    public Void visitFunctionStmt(Stmt.Function stmt) {
        return null;
    }

    @Override
    public Void visitIfStmt(Stmt.If stmt) {
        return null;
    }

    @Override
    public Void visitReturnStmt(Stmt.Return stmt) {
        if (stmt.value != null) {
            output.append(String.format("return %s;\n", evaluate(stmt.value)));
        } else {
            output.append("return;\n");
        }

        return null;
    }

    @Override
    public Void visitVarStmt(Stmt.Var stmt) {
        if (stmt.initializer != null) {
            output.append(String.format("let %s = %s;\n", stmt.name.lexeme, evaluate(stmt.initializer)));
        } else {
            output.append(String.format("let %s = null;\n", stmt.name.lexeme));
        }

        return null;
    }

    @Override
    public Void visitWhileStmt(Stmt.While stmt) {
        return null;
    }

    @Override
    public Void visitForInStmt(Stmt.ForIn stmt) {
        return null;
    }

    @Override
    public Void visitMatchStmt(Stmt.Match stmt) {
        return null;
    }

    @Override
    public Void visitMatchCaseStmt(Stmt.MatchCase stmt) {
        return null;
    }

    @Override
    public Void visitTraitStmt(Stmt.Trait stmt) {
        return null;
    }

    @Override
    public Void visitThrowStmt(Stmt.Throw stmt) {
        return null;
    }

    @Override
    public Void visitEnumStmt(Stmt.Enum stmt) {
        output.append(String.format("const %s = Object.freeze({\n", stmt.name.lexeme));

        int idx = 0;
        for (Stmt.Enum.Variant variant : stmt.variants) {
            output.append(String.format("    %s: %d\n", variant.name().lexeme, idx));
            idx++;
        }

        output.append("});\n");

        return null;
    }

    @Override
    public Void visitTryCatchStmt(Stmt.TryCatch stmt) {
        return null;
    }

    @Override
    public Void visitNamespaceStmt(Stmt.Namespace stmt) {
        return null;
    }

    @Override
    public Void visitObjectDestructuringStmt(Stmt.ObjectDestructuring stmt) {
        return null;
    }

    @Override
    public Void visitArrayDestructuringStmt(Stmt.ArrayDestructuring stmt) {
        return null;
    }

    @Override
    public Void visitUsingStmt(Stmt.Using stmt) {
        return null;
    }

    @Override
    public Void visitForStmt(Stmt.For stmt) {
        return null;
    }

    @Override
    public Void visitAssignExpr(Expr.Assign expr) {
        return null;
    }

    @Override
    public Void visitBinaryExpr(Expr.Binary expr) {
        Object left = evaluate(expr.left);

        switch (expr.operator) {


            case null, default -> throw new RuntimeError(
                    expr.operator,
                    "TranspilerError",
                    "Unreachable",
                    "Please report this error on the GitHub repository!"
            );
        }
    }

    @Override
    public Void visitCallExpr(Expr.Call expr) {
        return null;
    }

    @Override
    public Void visitGetExpr(Expr.Get expr) {
        return null;
    }

    @Override
    public Void visitGroupingExpr(Expr.Grouping expr) {
        return null;
    }

    @Override
    public Void visitLiteralExpr(Expr.Literal expr) {
        return null;
    }

    @Override
    public Void visitLogicalExpr(Expr.Logical expr) {
        return null;
    }

    @Override
    public Void visitSetExpr(Expr.Set expr) {
        return null;
    }

    @Override
    public Void visitSuperExpr(Expr.Super expr) {
        return null;
    }

    @Override
    public Void visitThisExpr(Expr.This expr) {
        return null;
    }

    @Override
    public Void visitUnaryExpr(Expr.Unary expr) {
        return null;
    }

    @Override
    public Void visitVariableExpr(Expr.Variable expr) {
        return null;
    }

    @Override
    public Void visitArrayExpr(Expr.Array expr) {
        return null;
    }

    @Override
    public Void visitArraySubscriptGetExpr(Expr.SubscriptGet expr) {
        return null;
    }

    @Override
    public Void visitArraySubscriptSetExpr(Expr.SubscriptSet expr) {
        return null;
    }

    @Override
    public Void visitLambdaExpr(Expr.Lambda expr) {
        return null;
    }

    @Override
    public Void visitDictionaryExpr(Expr.Dictionary expr) {
        return null;
    }

    @Override
    public Void visitTypeofExpr(Expr.Typeof expr) {
        return null;
    }

    @Override
    public Void visitTupleLiteralExpr(Expr.TupleLiteral expr) {
        return null;
    }

    @Override
    public Void visitLazyExpr(Expr.Lazy expr) {
        return null;
    }

    @Override
    public Void visitSpreadExpr(Expr.Spread expr) {
        return null;
    }

    @Override
    public Void visitTernaryExpr(Expr.Ternary expr) {
        return null;
    }
}
